(function(){mstrmojo.requiresCls("mstrmojo.array","mstrmojo.gmaps.MapUtils","mstrmojo.gmaps.MapEnums","mstrmojo.gmaps.layer.Layer","mstrmojo.gmaps.basemap._CanLoadMapExternalScript","mstrmojo.PerformanceLogOutput");var $MOJO=mstrmojo,emptyFn=$MOJO.emptyFn,$ARR=$MOJO.array,$GMAPS=$MOJO.gmaps,$MUTIL=$GMAPS.MapUtils,$EnumTransformState=$GMAPS.EnumTransformState,$EnumGeometryType=$GMAPS.EnumGeometryType,$EnumPropertyType=$GMAPS.EnumPropertyType,$PerfLog=$MOJO.PerformanceLogOutput,GEO_MIN_INTERVAL=1e-7,DEFAULT_CENTER={lat:31,lng:-97};mstrmojo.gmaps.layer.BaseLayer=mstrmojo.declare(mstrmojo.gmaps.layer.Layer,[mstrmojo.gmaps.basemap._CanLoadMapExternalScript],{scriptClass:"mstrmojo.gmaps.layer.BaseLayer",_baseMap:null,baseMapType:null,mapStyle:null,eventListenerArr:null,gridParams:null,mstProp:null,attributeMapping:null,isOnPremise:null,isSupport:true,minZoom:0,maxZoom:16,defaultZoom:1,wgs84SP:{wkid:4326},originalZoom:null,originalLatLngCenter:null,originalGeoExtent:null,originalBearing:null,originalPitch:null,mapZoom:null,mapCenter:null,hasLoaded:false,transformState:null,_xCoordsMin:0,_xCoordsMax:0,xCoordsMinForG:null,xCoordsMaxForG:null,geoScreenRange:0,showZoomBtns:true,mvo:null,typeForThumbnail:null,lastPointX:null,lastPointLng:null,needResize:false,domId:null,toUpdateLayers:null,supportLayerZoomRange:false,init:function init(props){this._super(props);this.eventListenerArr=[];this.isBaseMapReady=false;this._initDefaultZoom();},_initLayerDomTree:function _initLayerDomTree(){var mapViewer=this.parent,baseLayerDiv=mapViewer&&mapViewer.getBaseLayerContainer(),div_=this.div_=document.createElement("div");this.domId=this.id+"-baseLayer-content";$MUTIL.setLayerNodeProps(div_,this.domId,"mstrMap-baseLayer-content",this.getWidth(),this.getHeight());if(baseLayerDiv){baseLayerDiv.appendChild(div_);}},_initDefaultZoom:function _initDefaultZoom(){var width=this.getWidth(),height=this.getHeight(),maxSize,zoomLevel;if($MUTIL.checkVal(width)&&$MUTIL.checkVal(height)){maxSize=Math.max(parseInt(width),parseInt(height));zoomLevel=Math.floor(Math.log(maxSize)/Math.LN2)-7;this.defaultZoom=zoomLevel>1?zoomLevel:1;}},loadBaseMap:function loadBaseMap(){var mapViewer=this.parent;if(mapViewer&&mapViewer.cloudLayerInit!==true){mapViewer.cloudLayerInit=true;mapViewer.refreshCloudLayers();}},render:function render(){$MUTIL.showWait();this.processConfigInfo();this.initBaseMap();$MUTIL.hideWait();},resize:function resize(width,height){if(!this._super(width,height)){return ;}var mapViewer=this.parent;this.needResize=mapViewer&&mapViewer.isDynamicZoom()===true;},updateForResizing:function updateForResizing(){var needResize=this.needResize,mapViewer=this.parent;this.needResize=null;if(needResize&&mapViewer){this.isBaseMapReady=false;this.setExtent(mapViewer.getMapGeoExtent(),true);}},updateExtent:function updateExtent(geoExtent){var latInterval,lngInterval;this.isBaseMapReady=false;if($MUTIL.checkVal(this.originalZoom)&&this.originalLatLngCenter){if(this.supportBearingAndPitch()){this.setBearing(this.originalBearing);this.setPitch(this.originalPitch);}this.centerAndZoom(this.originalLatLngCenter,this.originalZoom);this.originalZoom=null;this.originalLatLngCenter=null;this.originalBearing=null;this.originalPitch=null;}else{if(geoExtent){latInterval=Math.abs(geoExtent.latNorth-geoExtent.latSouth);lngInterval=Math.abs(geoExtent.lngEast-geoExtent.lngWest);}if(latInterval<GEO_MIN_INTERVAL&&lngInterval<GEO_MIN_INTERVAL){this.toUpdateLayers=true;this.centerAndZoom({lat:geoExtent.latNorth,lng:geoExtent.lngEast},this.maxZoom);}else{this.setExtent(geoExtent);}}},setZoom:function setZoom(level){var _baseMap=this._baseMap;if(_baseMap&&_baseMap.setZoom instanceof Function&&$MUTIL.checkVal(level)){_baseMap.setZoom(this.validateZoomLevel(level));}},getZoom:function getZoom(){var _baseMap=this._baseMap;if(_baseMap&&(_baseMap.getZoom instanceof Function)){return _baseMap.getZoom();}},validateZoomLevel:function validateZoomLevel(zoomLevel){var zoom=zoomLevel;if(zoomLevel<this.minZoom){zoom=this.minZoom;}else{if(zoomLevel>this.maxZoom){zoom=this.maxZoom;}}return zoom;},getScreenPositionInfo:function getScreenPositionInfo(graphic){if(!graphic){return ;}var type=graphic.type,geoData=graphic.geoData;switch(type){case $EnumGeometryType.Point:return this.getScreenPointInfo(geoData);case $EnumGeometryType.Polygon:return this.getScreenPolygonInfo(geoData);default:break;}},getScreenPolygonInfo:function getScreenPolygonInfo(geoPolylineArr){var screenPolylineArr=[];$ARR.forEach(geoPolylineArr,function(geoPolyline){var polylineArr=this.getScreenPolylineInfo(geoPolyline);if($ARR.isArray(polylineArr)){screenPolylineArr=screenPolylineArr.concat(polylineArr);}},this);return{screenPolylineArr:screenPolylineArr};},getScreenPolylineInfo:function getScreenPolylineInfo(geoPointArr){this.transformState=$EnumTransformState.ReadyToUse;this.lastPointLng=null;this.lastPointX=null;var screenPolylineArr=[[]];$ARR.forEach(geoPointArr,function(geoPoint){if(!!geoPoint){var screenPoint=this.getScreenPointInfo(geoPoint);if(screenPoint){geoPoint.x=screenPoint.x;geoPoint.y=screenPoint.y;}this._updateStateForPolylineTransform(screenPoint,geoPoint);this._addPointToScreenPolylines(screenPoint,screenPolylineArr);}},this);delete this.transformState;return screenPolylineArr;},getScreenPointInfo:function getScreenPointInfo(point){var offset=this.getGraphicsOffset(),screenPoint=this.latLngToPixelXY(point);if(!offset||!$MUTIL.checkVal(offset.x)||!$MUTIL.checkVal(offset.y)){return screenPoint;}else{if(screenPoint&&$MUTIL.checkVal(screenPoint.x)&&$MUTIL.checkVal(screenPoint.y)){return{x:screenPoint.x-offset.x,y:screenPoint.y-offset.y};}}},adjustPointInsideViewer:function adjustPointInsideViewer(screenPoint,xCoordsMin){var geoScreenRange=this.geoScreenRange,xCoords;if(!$MUTIL.checkVal(geoScreenRange)||!$MUTIL.checkVal(xCoordsMin)||(geoScreenRange===0)||!screenPoint||!$MUTIL.checkVal(screenPoint.x)){return screenPoint;}xCoords=(screenPoint.x-xCoordsMin)%geoScreenRange;while(xCoords<0){xCoords+=geoScreenRange;}screenPoint.x=xCoords+xCoordsMin;return screenPoint;},_addPointToScreenPolylines:function _addPointToScreenPolylines(screenPoint,screenPolylineArr){if(!screenPoint||!$MUTIL.checkVal(screenPoint.x)||!$MUTIL.checkVal(screenPoint.y)||!$ARR.isArray(screenPolylineArr)){return ;}var screenPointArr1=screenPolylineArr[0],screenPointArr2=screenPolylineArr[1],_addPointInBoundaries=function(point,fromPointArr,toPointArr,leftBoundary,rightBoundary){var lastPoint=fromPointArr[fromPointArr.length-1],boundaryPointY=(point.y+lastPoint.y)/2;if(point.x<lastPoint.x){fromPointArr.push({x:rightBoundary,y:boundaryPointY});toPointArr.push({x:leftBoundary,y:boundaryPointY});}else{fromPointArr.push({x:leftBoundary,y:boundaryPointY});toPointArr.push({x:rightBoundary,y:boundaryPointY});}};switch(this.transformState){case $EnumTransformState.UseExistingLine:default:screenPointArr1.push(screenPoint);break;case $EnumTransformState.UseNewLine:screenPointArr2.push(screenPoint);break;case $EnumTransformState.CrossFromExistingToNewLine:if(!$ARR.isArray(screenPointArr2)){screenPointArr2=screenPolylineArr[1]=[];}_addPointInBoundaries(screenPoint,screenPointArr1,screenPointArr2,this.xCoordsMinForG,this.xCoordsMaxForG);screenPointArr2.push(screenPoint);break;case $EnumTransformState.CrossFromNewToExistingLine:_addPointInBoundaries(screenPoint,screenPointArr2,screenPointArr1,this.xCoordsMinForG,this.xCoordsMaxForG);screenPointArr1.push(screenPoint);break;}},_updateStateForPolylineTransform:function _updateStateForPolylineTransform(screenPoint,geoPoint){if(!$MUTIL.checkDefined(this.transformState)){return ;}var isXBoundary=this.checkXBoundary(screenPoint,geoPoint);if(!!isXBoundary){switch(this.transformState){case $EnumTransformState.UseExistingLine:case $EnumTransformState.CrossFromNewToExistingLine:this.transformState=$EnumTransformState.CrossFromExistingToNewLine;break;case $EnumTransformState.UseNewLine:case $EnumTransformState.CrossFromExistingToNewLine:this.transformState=$EnumTransformState.CrossFromNewToExistingLine;break;default:break;}}else{switch(this.transformState){case $EnumTransformState.ReadyToUse:case $EnumTransformState.CrossFromNewToExistingLine:this.transformState=$EnumTransformState.UseExistingLine;break;case $EnumTransformState.CrossFromExistingToNewLine:this.transformState=$EnumTransformState.UseNewLine;break;default:break;}}},checkXBoundary:function checkXBoundary(screenPoint,geoPoint){if(!screenPoint||!$MUTIL.checkVal(screenPoint.x)||!$MUTIL.checkVal(screenPoint.y)||!geoPoint||!$MUTIL.checkVal(geoPoint.lat)||!$MUTIL.checkVal(geoPoint.lng)){return ;}var isXBoundary,isCrossLng180;if($MUTIL.checkVal(this.lastPointX)&&$MUTIL.checkVal(this.lastPointLng)){isXBoundary=((geoPoint.lng>this.lastPointLng)&&(screenPoint.x<this.lastPointX))||((geoPoint.lng<this.lastPointLng)&&(screenPoint.x>this.lastPointX));isCrossLng180=this.checkCrossLng180(geoPoint.lng,this.lastPointLng);}this.lastPointLng=geoPoint.lng;this.lastPointX=screenPoint.x;return(!!isCrossLng180)?!isXBoundary:!!isXBoundary;},checkCrossLng180:function checkCrossLng180(lng0,lng1){return($MUTIL.checkVal(lng0)&&$MUTIL.checkVal(lng1))&&(Math.abs(lng0-lng1)>180);},updateMapExtent:function updateMapExtent(){this.hasLoaded=true;this._super();},updateGraphicLayers:function updateGraphicLayers(){var mapViewer=this.parent;if(mapViewer&&mapViewer.hasInit===true&&this.canUpdateLayers()){mapViewer.resetCssTransform();mapViewer.updateCoordForAllGraphicLayers();this.toUpdateLayers=false;}},canUpdateLayers:function canUpdateLayers(){return !!this.toUpdateLayers;},handleZoomStart:function handleZoomStart(){var mapViewer=this.parent;if(mapViewer){mapViewer.hideAllGraphicLayers();}},handleZoomChange:function handleZoomChange(){this.mapZoom=this.getZoom();this.toUpdateLayers=true;if(typeof this.autoSwitchStyles==="function"){this.autoSwitchStyles();}this.autoSaveZoomAndPos();},handleExtentChangeEvt:function hangleExtentChangeEvt(){$PerfLog.endTimer("timerid_callback_handleExtentChange");$PerfLog.visPrint("render All Graphic Layers start");$PerfLog.startTimer({functionName:"BaseLayer.handleExtentChange: ",purpose:"render all graphic layers"},"timerid_handleExtentChange");var needUpdateGraphicLayers=!(this.resetExtentConfig||this.needResize),vismap=this.map;if(!vismap){return ;}if(needUpdateGraphicLayers){this.updateGraphicLayers();}if(this.resetExtentConfig){if(vismap.needMapReadyEvent()){this.isBaseMapReady=false;}this.setExtent(this.resetExtentConfig);this.resetExtentConfig=null;}this.updateForResizing();this.handleExtentChange();},handleExtentChange:function handleExtentChange(){this.mapCenter=this.getLngLatCenter();this.autoSaveZoomAndPos();},autoSaveZoomAndPos:function autoSaveZoomAndPos(){var visMap=this.map;if(visMap){visMap.autoSaveZoomAndPos();}},handleMouseWheel:function handleMouseWheel(params){if(!params||!params.zoomDelta){return ;}var _baseMap=this._baseMap,zoom;if(!!_baseMap){zoom=this.validateZoomLevel(_baseMap.getZoom()+params.zoomDelta);_baseMap.setZoom(zoom);}},isDHTMLinIE:function(){var appVer=window.navigator.appVersion,isIE=(appVer.indexOf("MSIE")!==-1||appVer.indexOf("Trident/")>0),mapConfig=this.map&&this.map.getMapConfig();return(mapConfig&&mapConfig.common.isRW&&(typeof (microstrategy)!=="undefined")&&isIE);},isProjectionReady:function isProjectionReady(){return true;},removeEventListeners:function removeEventListeners(){var listeners=this.eventListenerArr,listener,i,il;if(!!listeners){for(i=0,il=listeners.length;i<il;i++){listener=listeners[i];if(!listener){continue;}if(!!listener.remove){listener.remove();}else{dojo.disconnect(listener);}}}this.eventListenerArr=null;},getViewport:function(){return null;},getMapStyleData:function getMapStyleData(){var mapStyleData=[],mapStyles=this.getMapStyles(),selectedStyle=(this.mapStyle+"").replace(/(\s+)|(\s+$)/g,""),mapStyle,idString,matchId,i,il;if(!mapStyles||!$ARR.isArray(mapStyles)){return ;}for(i=0,il=mapStyles.length;i<il;i++){mapStyle=mapStyles[i];if(!!mapStyle){idString=this.getStyleIdForToolbar(mapStyle).replace(/(\s+)|(\s+$)/g,"");matchId=(mapStyle.id+"").replace(/(\s+)|(\s+$)/g,"");mapStyleData.push({id:idString,n:mapStyle.n,v:mapStyle.id,selected:selectedStyle===matchId,type:this.typeForThumbnail});}}return mapStyleData;},getStyleIdForToolbar:function getStyleIdForToolbar(styleItem){return styleItem.id+"";},updateMapToolbar:function updateMapToolbar(){var mapViewer=this.parent;if(mapViewer){mapViewer.updateMapToolbar();}},getSearchSuggestions:function getSearchSuggestions(pattern,callback){var blocks=this.getInHouseResults(pattern)||[];callback(blocks);},getInHouseResults:function getInHouseResults(pattern){var mapViewer=this.parent,blocks=[],elems,stopFunction=function(obj){elems.push(obj);return elems.length>=5;};if(!mapViewer){return ;}mapViewer.forEachGraphicLayer(function(graphicLayer){var results=[];elems=[];if(!!graphicLayer){elems=graphicLayer.filterElements(pattern);if(elems.length>0){$ARR.forEach(elems,function(v){v.cls="elem";results.push(v);});blocks.push({label:graphicLayer.getLayerName(),items:results});}}},true);return blocks;},onSuggestionItemSelected:function onSuggestionItemSelected(item){if(!item){return ;}if(item.geo){this.navToCloudLocation(item);}else{if(item.v){this.navToInHouseLocation(item);}}},navToInHouseLocation:function navToInHouseLocation(item){var map=this._baseMap,graphic=item.v,geoExtent;if(!map||!graphic){return ;}geoExtent=graphic.getGeoExtent();if(geoExtent){this.setExtent(geoExtent);}else{if(graphic.getGeoCenter instanceof Function){this.centerAndZoom(graphic.getGeoCenter(),10);}}},displayError:function displayError(message){var map=this.map;if(!!map&&map.displayError instanceof Function){map.displayError(message);}},getBaseMap:function getBaseMap(){return this._baseMap;},setExtent:function(geoExtent){this.toUpdateLayers=true;this.geoExtent=this.cloneExtent(geoExtent);},updateXCoordsRange:function updateXCoordsRange(){var geoScreenRange=this.getGeoScreenRange(),screenWidth=this.getWidth(),offset=this.getGraphicsOffset();if($MUTIL.checkVal(geoScreenRange)&&$MUTIL.checkVal(screenWidth)){this._xCoordsMin=this.xCoordsMinForG=(screenWidth-geoScreenRange)/2;this._xCoordsMax=this.xCoordsMaxForG=this._xCoordsMin+geoScreenRange;this.geoScreenRange=geoScreenRange;}if(offset&&$MUTIL.checkVal(offset.x)){this.xCoordsMinForG-=offset.x;this.xCoordsMaxForG-=offset.x;}},addEventListeners:function addEventListeners(events){if(!events){return ;}var me=this,_baseMap=this._baseMap,eventListenerArr=me.eventListenerArr=[],vismap=this.map;eventListenerArr.push(_baseMap.on(events["extent-change"],this.handleExtentChangeEvt.bind(this)));if(events["zoom-start"]){eventListenerArr.push(_baseMap.on(events["zoom-start"],this.handleZoomStart.bind(this)));}eventListenerArr.push(_baseMap.on(events["zoom-end"],function(){if(vismap.needMapReadyEvent()){me.isBaseMapReady=false;vismap.graphicsReady=false;}me.handleZoomChange();}));eventListenerArr.push(_baseMap.on(events.load,this.handleOnLoad.bind(this)));},handleOnLoad:function handleOnLoad(){var vismap=this.map;if(vismap&&vismap.needMapReadyEvent()){this.isBaseMapReady=true;if($MUTIL.checkHasFunction(vismap,"checkForMapReady")){vismap.checkForMapReady();}}},processConfigInfo:emptyFn,getGeoScreenRange:function getGeoScreenRange(){var eastLngPoint=this.latLngToPixelXY({lat:0,lng:180},true),westLngPoint=this.latLngToPixelXY({lat:0,lng:-180},true);if(!!eastLngPoint&&$MUTIL.checkVal(eastLngPoint.x)&&!!westLngPoint&&$MUTIL.checkVal(westLngPoint.x)){return Math.abs(eastLngPoint.x-westLngPoint.x);}},handleNoInternet:function handleNoInternet(){this.displayError($MUTIL.getNoInternetMessage());},getDefaultCenter:function getDefaultCenter(){return DEFAULT_CENTER;},triggerEvt:emptyFn,setCenter:emptyFn,centerAndZoom:function centerAndZoom(geoPoint,zoomLevel){this.setCenter(geoPoint);this.setZoom(zoomLevel);},isSameCenter:function isSameCenter(prev,curt){return prev.lat===curt.lat&&prev.lng===curt.lng;},supportBearingAndPitch:function supportBearingAndPitch(){return false;},getMapZoomAndPosition:function getMapZoomAndPosition(){var zoomPosObj={},supportBearingAndPitch=this.supportBearingAndPitch();zoomPosObj[$EnumPropertyType.mapCenter]=this.getLngLatCenter();zoomPosObj[$EnumPropertyType.zoomLevel]=this.getZoom();zoomPosObj.supportBearingAndPitch=supportBearingAndPitch;if(supportBearingAndPitch){zoomPosObj[$EnumPropertyType.mapBearing]=this.getBearing();zoomPosObj[$EnumPropertyType.mapPitch]=this.getPitch();}return zoomPosObj;},setMapStyle:emptyFn,latLngToPixelXY:emptyFn,pixelXYtoLatLng:emptyFn,getLngLatCenter:emptyFn,getDefaultMapStyle:emptyFn,getMapStyles:emptyFn,getDefaultStyleIdx:emptyFn,hideMapTools:emptyFn,showMapTools:emptyFn,panBy:emptyFn,toggleBaseMapLabels:emptyFn,toggleBaseMapLabelsPos:emptyFn,isLabelGroupExist:emptyFn,isLabelGropOnTop:emptyFn,destroy:function destroy(ignoreDom){this._super(ignoreDom);this.eventListenerArr=null;this._baseMap=null;}});})();